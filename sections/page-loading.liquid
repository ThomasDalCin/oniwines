<!--page loading section with video-->
<div class="w-full h-svh relative z-50">

    <!--wrapper container main elements-->
    <div class="loading-wrapper w-full transform transition-all duration-500 ease-[cubic-bezier(.06,.86,.78,.22)]">

        <!--container video-->
        <div class="section-content video-container w-full h-screen">
            <video class="video w-full h-full object-cover object-center" autoplay muted playsinline>
                <source src="{{ 'page-loading.mp4' | asset_url }}" />
            </video>
        </div>

        <!--home step text layout -->
        <div class="section-content w-full h-screen">
            <div class="w-full h-full flex flex-col items-center justify-center gap-y-10 relative">
                <div class="w-auto h-auto flex items-center justify-center text-center">
                    <h1 class="main-title-mobile lg:main-title-laptop">
                        {{ section.settings.first_step_title | default: "Scopri il mondo di Oniwines." }}
                    </h1>
                </div>
                <div class="cta-container w-auto h-auto flex items-center justify-center">
                    <div class="cta-orange">
                        <p class="uppercase text-[12px] leading-[16px] tracking-[-3%]">{{ section.settings.cta_text |
                            default: "Entra" }}</p>
                        {% render 'play-poligon' %}
                    </div>
                </div>
                <div class="bottom-text-container w-full absolute h-auto left-0 bottom-7 right-0">
                    <div class="w-auto h-auto flex items-center justify-center">
                        <p class="uppercase underline text-[12px] leading-[16px] tracking-[-3%] font-bold">
                            {{ section.settings.custom_settings_text | default: "Entra senza audio" }}
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <!--container clip-path -->
        <div class="section-content w-full h-screen overflow-hidden relative flex items-center justify-center">
            <!--clip path content-->
            <div class="clip-path-container w-full h-full overflow-hidde relative"
                style="clip-path: polygon(20% 20%, 80% 20%, 80% 80%, 20% 80%);">
                <!-- Container video -->
                <video class="video-hero w-full h-full object-cover object-center relative" autoplay muted playsinline
                    loop>
                    <source src="https://cdn.shopify.com/videos/c/o/v/a700a6e9af1e4acd9fbeb045fc59915b.mp4" />
                </video>
                <!--container video icon -->
                <div class="audio-button w-auto h-auto absolute bottom-7 right-7 cursor-pointer">
                    {% render 'audio-icon' %}
                </div>
            </div>
        </div>

        <!--liquid code -->
        {% assign counter = 0 %}
        {% for page in pages %}
        {% if page.title contains "Cantina" or page.title contains "Canteen" %}
        {% assign counter = counter | plus: 1 %}
        {% endif %}
        {% endfor %}

        {% assign counter_vh = counter | times: 100 %}

        <div class="section-content w-full h-screen">
            <div class="section-content-overlay content-overlay w-full h-auto relative">


                <div class="w-full h-screen sticky top-0 z-20 overflow-y-scroll"
                    style="clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)">

                    <!-- container canvas -->
                    <div class="w-full h-screen sticky top-0 z-5">
                        <canvas id="canvas" class="w-full h-full">
                            <!-- Three.js content -->
                        </canvas>
                    </div>

                    <div class="w-full h-auto absolute top-0 left-0 right-0 z-10">
                        {% for page in pages %}
                        {% if page.title contains "Cantina" or page.title contains "Canteen" %}
                        {% assign pageCustomTitle = page.title | split: " " %}
                        {% assign pageCustomTitle = pageCustomTitle | slice: 1, pageCustomTitle.size %}
                        {% assign pageCustomTitle = pageCustomTitle | join: " " %}
                        <div
                            class="overlay-section w-full h-screen flex items-center justify-center flex-col gap-y-5 snap-start">
                            <div class="w-auto h-auto flex items-start justify-center">
                                <h2 class="main-title-mobile lg:main-title-laptop">{{ pageCustomTitle | upcase }}</h2>
                            </div>
                        </div>
                        {% endif %}
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>




<script>
    document.addEventListener('DOMContentLoaded', async () => {
        const navbar = document.querySelector('.navigation');
        const loadingWrapper = document.querySelector('.loading-wrapper');
        const sectionOverlays = document.querySelector('.content-overlay');
        const overlayTextContainer = document.querySelector('.overlays-container');
        const overlaySection = document.querySelectorAll('.overlay-section');
        const video = document.querySelector('.video');
        const sectionsContainer = document.querySelectorAll('.section-content');
        const enterButton = document.querySelector('.cta-orange');
        const audioButton = document.querySelector('.audio-button');

        let currentTranslateValue = 0;

        const getPercentValueToScroll = async (value) => {
            const valueToDivide = 100;
            const percentValue = valueToDivide / value.length;
            return percentValue;
        }

        const percentValue = await getPercentValueToScroll(sectionsContainer);
        console.log(percentValue);


        loadingWrapper.classList.add(`h-[${sectionsContainer.length * 100}vh]`);
        document.body.classList.add('no-scroll');


        video.addEventListener('ended', () => {
            setTimeout(() => {
                currentTranslateValue += percentValue;

                loadingWrapper.style.transform = `translateY(-${currentTranslateValue}%)`;

                loadingWrapper.addEventListener('transitionend', () => {
                    navbar.classList.remove('opacity-0');
                });
            }, 500);
        });

        enterButton.addEventListener('click', () => {
            currentTranslateValue += percentValue;

            loadingWrapper.style.transform = `translateY(-${currentTranslateValue}%)`;

            loadingWrapper.addEventListener('transitionend', () => {
                setTimeout(() => {
                    gsap.to(".clip-path-container", {
                        clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
                        duration: 1,
                        ease: "Power2.easeOut",
                        onComplete: () => { }
                    })
                }, 200)
            })
        })

        audioButton.addEventListener('click', () => {
            currentTranslateValue += percentValue;
            loadingWrapper.style.transform = `translateY(-${currentTranslateValue}%)`;
            document.body.classList.remove('no-scroll');
        });

    });
</script>

<script type="module">
    import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.173.0/build/three.module.js';
    import threeAddons from 'https://cdn.jsdelivr.net/npm/three-addons@1.2.0/+esm'


    document.addEventListener('DOMContentLoaded', async () => {

        //set canvas and scene
        const canvas = document.getElementById('canvas');
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0xDACABB);
        

        //handle svg loader
        const loader = new threeAddons.SVGLoader();
        const svg = `<svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" height="100%" style="fill-rule:nonzero;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;" xml:space="preserve" width="100%" version="1.1" viewBox="0 0 24 24">
<defs/>
<g id="Untitled">
<path d="M7.15256e-07+7.15256e-07L24+7.15256e-07L24+24L7.15256e-07+24L7.15256e-07+7.15256e-07M6.30667+20.0533C6.84+21.1867+7.89333+22.12+9.69333+22.12C11.6933+22.12+13.0667+21.0533+13.0667+18.72L13.0667+11.0133L10.8+11.0133L10.8+18.6667C10.8+19.8133+10.3333+20.1067+9.6+20.1067C8.82667+20.1067+8.50667+19.5733+8.14667+18.9467L6.30667+20.0533M14.28+19.8133C14.9467+21.12+16.2933+22.12+18.4+22.12C20.5333+22.12+22.1333+21.0133+22.1333+18.9733C22.1333+17.0933+21.0533+16.2533+19.1333+15.4267L18.5733+15.1867C17.6+14.7733+17.1867+14.4933+17.1867+13.8267C17.1867+13.28+17.6+12.8533+18.2667+12.8533C18.9067+12.8533+19.3333+13.1333+19.72+13.8267L21.4667+12.6667C20.7333+11.3867+19.6933+10.8933+18.2667+10.8933C16.2533+10.8933+14.96+12.1733+14.96+13.8667C14.96+15.7067+16.04+16.5733+17.6667+17.2667L18.2267+17.5067C19.2667+17.96+19.88+18.24+19.88+19.0133C19.88+19.6533+19.28+20.12+18.3467+20.12C17.24+20.12+16.6+19.5467+16.12+18.7467L14.28+19.8133Z" opacity="1" fill="#000000"/>
</g>
</svg>`;

        loader.load(
            svg,
            function (data) {
                const paths = data.paths;
                console.log(paths);
                const group = new THREE.Group();

                for (let i = 0; i < paths.length; i++) {
                    const path = paths[i];
                    const material = new THREE.MeshBasicMaterial({
                        color: path.color,
                        side: THREE.DoubleSide,
                        depthWrite: false
                    });

                    const shapes = new threeAddons.SVGLoader().createShapes(path);

                    for (let j = 0; j < shapes.length; j++) {
                        const shape = shapes[j];
                        const geometry = new THREE.ShapeGeometry(shape);
                        const mesh = new THREE.Mesh(geometry, material);
                        group.add(mesh);
                    }
                }
                scene.add(group);
            },
            function (xhr) {
                console.log((xhr.loaded / xhr.total) * 100 + '% loaded');
            },
            function (error) {
                console.log('An error happened', error);
            }
        );

        //axis helper
        const axesHelper = new THREE.AxesHelper(5);
        scene.add(axesHelper);

        //set camera
        const canvasSizes = {width: window.innerWidth, height: window.innerHeight};
        const aspectRatio = canvasSizes.width / canvasSizes.height;
        const camera = new THREE.OrthographicCamera(-aspectRatio * 20, aspectRatio * 20, 20, -20, 0.1, 100);
        camera.position.set(0, 0, 10);
        camera.lookAt(0, 0, 0);

        //set renderer
        const renderer = new THREE.WebGLRenderer({canvas: canvas, antialias: true});
        renderer.setSize(canvasSizes.width, canvasSizes.height);

        //inzialize render
        renderer.render(scene, camera);

    });
</script>